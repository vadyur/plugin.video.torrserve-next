# -*- coding: utf-8 -*-
from __future__ import absolute_import

import json
import socket
import threading
import sys

if sys.version_info >= (3, 0):
    from urllib import request as urllib_request
    from urllib.parse import urlencode
else:
    import urllib2 as urllib_request
    from urllib import urlencode
from torrserve.config import TORRSERVED_HOST, ADDON

class closing(object):
    def __init__(self, thing):
        self.thing = thing

    def __enter__(self):
        return self.thing

    def __exit__(self, *exc_info):
        self.thing.close()


class NoRedirectHandler(urllib_request.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        import urllib
        infourl = urllib.addinfourl(fp, headers, headers["Location"])
        infourl.status = code
        infourl.code = code
        return infourl

    http_error_300 = http_error_302
    http_error_301 = http_error_302
    http_error_303 = http_error_302
    http_error_307 = http_error_302

def http_request(url, post_data=None, get_data=None, raw=False, host=None, ljs=True):
    socket.setdefaulttimeout(60)
    if get_data:
        url += '?' + urlencode(get_data)
    if post_data and raw:
        post_data = post_data
    elif post_data:
        try:
            post_data = json.dumps(post_data)
        except:
            post_data = {"": ""}
    if host:
        url = host + url
    else:
        url = TORRSERVED_HOST+url
    req = urllib_request.Request(url, post_data)
    req.add_header('Content-Type', 'application/json')
    req.add_header('Accept-Charset', 'utf-8')
    req.add_header('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0')

    try:
        with closing(urllib_request.urlopen(req)) as response:
            payload = response.read()

            try:
                if payload and ljs:
                    return json.loads(payload.decode('utf-8', 'replace'))
                else:
                    return payload
            except:
                return payload
    except urllib_request.URLError as e:
        return None
    except Exception as e:
        return None

def client(hash=None, log=None):
    from torrserve_stream import Engine, Settings
    s = Settings()

    if not hasattr(client, 'engine'):
        client.engine = Engine(
            host=s.host, 
            port=s.port,
            auth=s.auth)

    if hash:
        client.engine.hash = hash

    if log:
        client.engine.log = log

    return client.engine

class MyHandler(urllib_request.HTTPHandler):
    def http_response(self, req, response):
        return response


def touch(url):
    o = urllib_request.build_opener(MyHandler())
    t = threading.Thread(target=o.open, args=(url,))
    t.start()
