import json
from torrserve.utils import humanizeSize, notify, settingsIsOpen, parseName, checkMime, makeMovieItem, makeTvShowItem, get_label
from torrserve.simpleplugin3_suport import create_listing
from vdlib.util.string import decode_string
import searcher


def get_size_from(stringSize):
    if not isinstance(stringSize, str):
        size = int(stringSize)
        return size

    parts = stringSize.split(" ")
    number = parts[0].replace(",", "")
    number = number.replace(".", "", number.count(".") - 1)

    dimension = parts[-1] if len(parts) > 1 else None

    if dimension in ['МБ', 'MB']:
        size = int(float(number) * float(2 << 19))
    else:
        size = int(float(number) * float(2 << 29))

    return size


def search_torrent(plugin, params):
    import xbmcplugin
    translate = plugin.gettext

    from tmdb.api import TMDB
    tmdb = TMDB()

    listing = []

    selSeason = params.selSeason
    ext_info = ""
    query = params.query
    if query is None:
        import xbmcgui
        params.type = "video"
        dialog = xbmcgui.Dialog()
        query = dialog.input(translate("Torrents"), type=xbmcgui.INPUT_ALPHANUM)
        if query == "":
            return
        with plugin.get_storage('historySearch'+params.type) as storage:
            storage['title9'] = storage.get('title8')
            storage['title8'] = storage.get('title7')
            storage['title7'] = storage.get('title6')
            storage['title6'] = storage.get('title5')
            storage['title5'] = storage.get('title4')
            storage['title4'] = storage.get('title3')
            storage['title3'] = storage.get('title2')
            storage['title2'] = storage.get('title1')
            storage['title1'] = storage.get('title0')
            storage['title0'] = query
    if params.type == "tvshow" and params.title:
        ext_info = tmdb.get_tv_show(params.id)
        selSeason = ""
        query = ext_info['name']
    elif params.type == "tvshow" and selSeason is None:
        ext_info = tmdb.get_tv_show(params.id)
        listing = []
        for number in range(1, ext_info['number_of_seasons']+1, 1):
            item = makeTvShowItem(ext_info, "season", number)
            item.update({
                'url': plugin.get_url(action='search', mod=params.mod, type=params.type, id=params.id, query=params.query, selSeason=number)
            })
            listing.append(item)
        return create_listing(listing, cache_to_disk=True, sort_methods=xbmcplugin.SORT_METHOD_LABEL, content="{0}s".format(params.type))
    elif params.type == "tvshow" and selSeason:
        ext_info = tmdb.get_tv_show(params.id)
        selSeason = "{0:02d}".format(int(selSeason))
        query = ext_info['original_name']
    elif params.type == "movie":
        ext_info = tmdb.get_movie(params.id)
        if params.title:
            query = "{0}".format(ext_info['title'])
        else:
            query = "{0}".format(ext_info['original_title'])
        if params.title == "onlyname":
            pass
        else:
            query = query + " ({0})".format(ext_info['release_date'][:4])

    if True:
        query = decode_string(query)
        result = searcher.Query(query)
        if not result:
            notify(translate("Empty result")+" "+query)
            return

    search_listing(plugin, params, translate, listing, selSeason, ext_info, query, result)

    from torrserve.navigation import getViewMode
    view_mode = getViewMode('result_view')
    if params.usearch == 'True':
        view_mode = None

    return create_listing(listing, category="{0}".format(translate("Search")),
                            cache_to_disk=True, sort_methods=(xbmcplugin.SORT_METHOD_LABEL, xbmcplugin.SORT_METHOD_SIZE),
                            content="{0}s".format(params.type), view_mode=view_mode)

def search_listing(plugin, params, translate, listing, selSeason, ext_info, query, result):
    for t in result:
        magnet    = t['url']
        name      = t['title']
        trackers  = "rutor,torlook"
        stringSize= t['size']
        seeds = t['sids']
        name = name.replace("<b>", "").replace("</b>", "")
        item = dict()
        size = get_size_from(stringSize)
        if not isinstance(stringSize, str):
            stringSize = humanizeSize(size)
        stringSize = stringSize.replace(' ', '')
        poster = None

        context_menu = [(
            translate("Add to DB"),
            "RunPlugin(%s)" % plugin.get_url(action="torrents", mod="add", magnet=magnet),
        )]
        if params.type == 'movie':
            if name.find(query) == -1 and not (name.find(query.split('(')[0])>-1 and (name.find(query.replace('(','([').split('(')[1].strip(' )'))>-1 or name.find(query.replace('(','((').split('(', 1)[1].strip())>-1 or name.find(query.replace('(','(/ ').split('(', 1)[1].strip().replace(')',' /'))>-1)):
                continue
            item = makeMovieItem(ext_info, False, size)
            poster = item['art'].get('poster')
            context_menu = [(
                translate("Add to DB"),
                "RunPlugin(%s)" % plugin.get_url(action="torrents", mod="add", magnet=magnet, item=repr(item)),
            )]
            context_menu.append((
                translate('Save to Library'),
                'RunPlugin({0})'.format(plugin.get_url(action='library', mod='save', id=ext_info['id'],
                                    year=ext_info['release_date'][:4], magnet=magnet, item=repr(item)))
            ))
        elif params.type == 'tvshow':
            numEp = ""
            numSeason = selSeason[1:] if selSeason and selSeason.startswith('0') else selSeason
            if query in name and name.find('S'+selSeason) > -1:
                if '[S'+selSeason+']' in name:
                    numEp = "All"
                elif '[S01-' in name:
                    numEp = "Multi"
                else:
                    numEp = name[name.find('S'+selSeason)+4:name.find('S'+selSeason)+6]
            elif query in name and name.find(selSeason+'x') > -1:
                numEp = name[name.find(selSeason+'x')+6:name.find(selSeason+'x')+8]
                if 'и' in numEp:
                    numEp = name[name.find(selSeason+'x')+3:name.find(selSeason+'x')+5]
            elif query in name and name.find('['+selSeason+'-') > -1:
                numEp = name[name.find('['+selSeason+'-')+4:name.find('['+selSeason+'-')+6]
            elif query in name and name.find('Сезон: '+numSeason) > -1:
                fk = 'Сезон: '+numSeason
                sk = name.find(fk)
                if name[sk+len(fk):sk+len(fk)+1].isdigit(): continue
                numEp = 'Multi' #TODO
            elif query in name and (name.find(numSeason+' сезон') > -1 or name.find('сезон '+numSeason) > -1):
                fk = 'сезон '+numSeason
                sk = name.find(fk)
                if sk > -1 and name[sk+len(fk):sk+len(fk)+1].isdigit(): continue
                numEp = 'Multi'
            else:
                continue
            if params.selSeason:
                    item = makeTvShowItem(ext_info, "season", int(params.selSeason), True, size)
            else:
                    item = makeTvShowItem(ext_info, "tvshow", None, True, size)
            poster = item['art'].get('poster')
            context_menu = [(
                translate("Add to DB"),
                "RunPlugin(%s)" % plugin.get_url(action="torrents", mod="add", magnet=magnet, info=json.dumps({'kodi':{'info': item['info']['video'], 'cast':item['cast']}, 'poster_path':item['art']['poster'] }) ),
            )]
            context_menu.append((
                translate('Save to Library'),
                'RunPlugin({0})'.format(plugin.get_url(action='library', mod='save', id=ext_info['id'], year=ext_info['first_air_date'][:4], magnet=magnet, season=selSeason, numEp=numEp, item=repr(item)))
            ))
        label = get_label(name)
        name = "[B]{1}[COLOR=FFFFFFFF]/{0}/[/COLOR][/B][COLOR=FFFFFFFF]{3}/[/COLOR] {2}".format(stringSize, label, name, seeds)
        try:
            item['info']['video']['title'] = name
        except KeyError:
            pass

        stream_info = ""
        if '2160' in label:
            stream_info = {'video': {'width': 3840, 'height': 2160}}
        elif '1080' in label:
            stream_info = {'video': {'width': 1920, 'height': 1080}}
        elif '720' in label:
            stream_info = {'video': {'width': 1280, 'height': 720}}
        else:
            stream_info = ""
        context_menu.append((
            translate('Open TAM'),
            'RunPlugin({0})'.format(plugin.get_url(action='tam', magnet=magnet)),
        ))
        item.update({
            "label": name,
            'url': plugin.get_url(action='gotInfo', magnet=magnet, poster=poster) if poster else plugin.get_url(action='gotInfo', magnet=magnet),
            'is_folder': True,
            "context_menu": context_menu,
            'stream_info': stream_info
        })
        listing.append(item)
