#!/usr/bin/python
# -*- coding: utf-8 -*-

#import httplib
#import re
import sys
PY2 = sys.version_info.major == 2
import os
#import Cookie
from vdlib.kodi.compat import translatePath

#import string, xbmc, xbmcgui, xbmcplugin, xbmcaddon
#-------------------------------
import time, random
if PY2:
	import urllib, urllib2
else:
	import urllib.parse as urllib
	import urllib.request as urllib2
#from time import gmtime, strftime 
#from urlparse import urlparse 
import socket
socket.setdefaulttimeout(30)

#-----------------------------------------

siteUrl = 'torlook.info'
httpSiteUrl = 'https://' + siteUrl


# - ====================================== antizapret ====================================================
#import time, cookielib
#sid_file = os.path.join(translatePath('special://temp/'), 'vpn.sid')
#cj = cookielib.FileCookieJar(sid_file) 
#hr  = urllib2.HTTPCookieProcessor(cj) 
#Lthread=[]


def ru(x):return unicode(x,'utf8', 'ignore')
def xt(x):return translatePath(x)
def rt(x):#('&#39;','’'), ('&#145;','‘')
	L=[('&quot;','"'), ('&amp;',"&"),('&#133;','…'),('&#38;','&'),('&#34;','"'), ('&#39;','"'), ('&#145;','"'), ('&#146;','"'), ('&#147;','“'), ('&#148;','”'), ('&#149;','•'), ('&#150;','–'), ('&#151;','—'), ('&#152;','?'), ('&#153;','™'), ('&#154;','s'), ('&#155;','›'), ('&#156;','?'), ('&#157;',''), ('&#158;','z'), ('&#159;','Y'), ('&#160;',''), ('&#161;','?'), ('&#162;','?'), ('&#163;','?'), ('&#164;','¤'), ('&#165;','?'), ('&#166;','¦'), ('&#167;','§'), ('&#168;','?'), ('&#169;','©'), ('&#170;','?'), ('&#171;','«'), ('&#172;','¬'), ('&#173;',''), ('&#174;','®'), ('&#175;','?'), ('&#176;','°'), ('&#177;','±'), ('&#178;','?'), ('&#179;','?'), ('&#180;','?'), ('&#181;','µ'), ('&#182;','¶'), ('&#183;','·'), ('&#184;','?'), ('&#185;','?'), ('&#186;','?'), ('&#187;','»'), ('&#188;','?'), ('&#189;','?'), ('&#190;','?'), ('&#191;','?'), ('&#192;','A'), ('&#193;','A'), ('&#194;','A'), ('&#195;','A'), ('&#196;','A'), ('&#197;','A'), ('&#198;','?'), ('&#199;','C'), ('&#200;','E'), ('&#201;','E'), ('&#202;','E'), ('&#203;','E'), ('&#204;','I'), ('&#205;','I'), ('&#206;','I'), ('&#207;','I'), ('&#208;','?'), ('&#209;','N'), ('&#210;','O'), ('&#211;','O'), ('&#212;','O'), ('&#213;','O'), ('&#214;','O'), ('&#215;','?'), ('&#216;','O'), ('&#217;','U'), ('&#218;','U'), ('&#219;','U'), ('&#220;','U'), ('&#221;','Y'), ('&#222;','?'), ('&#223;','?'), ('&#224;','a'), ('&#225;','a'), ('&#226;','a'), ('&#227;','a'), ('&#228;','a'), ('&#229;','a'), ('&#230;','?'), ('&#231;','c'), ('&#232;','e'), ('&#233;','e'), ('&#234;','e'), ('&#235;','e'), ('&#236;','i'), ('&#237;','i'), ('&#238;','i'), ('&#239;','i'), ('&#240;','?'), ('&#241;','n'), ('&#242;','o'), ('&#243;','o'), ('&#244;','o'), ('&#245;','o'), ('&#246;','o'), ('&#247;','?'), ('&#248;','o'), ('&#249;','u'), ('&#250;','u'), ('&#251;','u'), ('&#252;','u'), ('&#253;','y'), ('&#254;','?'), ('&#255;','y'), ('&laquo;','"'), ('&raquo;','"'), ('&nbsp;',' ')]
	for i in L:
		x=x.replace(i[0], i[1])
	return x

def mfindal(http, ss, es):
	L=[]
	while http.find(es)>0:
		s=http.find(ss)
		e=http.find(es)
		i=http[s:e]
		L.append(i)
		http=http[e+2:]
	return L

def mfind(t,s,e):
	r=t[t.find(s)+len(s):]
	r2=r[:r.find(e)]
	return r2

def rulower(str):
	str=str.strip()
	str=xt(str).lower()
	str=str.replace('Й','й')
	str=str.replace('Ц','ц')
	str=str.replace('У','у')
	str=str.replace('К','к')
	str=str.replace('Е','е')
	str=str.replace('Н','н')
	str=str.replace('Г','г')
	str=str.replace('Ш','ш')
	str=str.replace('Щ','щ')
	str=str.replace('З','з')
	str=str.replace('Х','х')
	str=str.replace('Ъ','ъ')
	str=str.replace('Ф','ф')
	str=str.replace('Ы','ы')
	str=str.replace('В','в')
	str=str.replace('А','а')
	str=str.replace('П','п')
	str=str.replace('Р','р')
	str=str.replace('О','о')
	str=str.replace('Л','л')
	str=str.replace('Д','д')
	str=str.replace('Ж','ж')
	str=str.replace('Э','э')
	str=str.replace('Я','я')
	str=str.replace('Ч','ч')
	str=str.replace('С','с')
	str=str.replace('М','м')
	str=str.replace('И','и')
	str=str.replace('Т','т')
	str=str.replace('Ь','ь')
	str=str.replace('Б','б')
	str=str.replace('Ю','ю')
	return str

def lower(s):
	try:s=s.decode('utf-8')
	except: pass
	try:s=s.decode('windows-1251')
	except: pass
	s=s.lower().encode('utf-8')
	return s


def GET(target, referer='', post=None):
	try:
		req = urllib2.Request(url = target, data = post)
		req.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
		req.add_header('accept-encoding', 'gzip')
		resp = urllib2.urlopen(req)
		if resp.info().get('Content-Encoding') == 'gzip':
			if PY2:
				from StringIO import StringIO
			else:
				from io import BytesIO as StringIO
			import gzip
			buf = StringIO(resp.read())
			f = gzip.GzipFile(fileobj=buf)
			http = f.read()
		else:
			http=resp.read()
		resp.close()
		return http
	except Exception as e:
		print(e)

def POST(target, post=None, referer=''):
	try:
		req = urllib2.Request(url = target, data = post)
		req.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
		req.add_header('Referer', referer)
		#req.add_header('X-Requested-With', 'XMLHttpRequest')
		resp = urllib2.urlopen(req)
		http = resp.read()
		resp.close()
		return http
	except Exception as e:
		return ''

def get_magnet(url):
	print('====get_magnet===')
	s=GET(url)
	rez="magnet:"+mfind(s, "magnet:", "'>")
	return rez

def get_list(hp, t2):#, info):
	print('== get_list ==')
	L=mfindal(hp, '<div class="webResult item">', '"></a></span>')
	print(len(L))
	L2=[]
	st=time.time()
	for i in L:
		if 'data-src=' in i and t2 in i:
			#print '===i===='
			for s in i.splitlines():
				if 'nofollow" target=' in s: 
					ttl = mfind(s, '">', '</a>').replace('<b>','').replace('</b>','')
				if 'webResultTitle' in s: 
					size=mfind(s, 'size">', '<').replace('&nbsp;', ' ')
				if 'torstat' in s: 
					seeds = mfind(s, '</i>', '<').strip()
				if 'magnet' in s: 
					murl = httpSiteUrl+'/'+mfind(s, 'data-src="', '"')
			#print ttl
			#print murl
#			if time.time()-st>8: return L2
#			curl=get_magnet(murl)
			curl = murl
			
			#print size
			itm ={"sids":seeds,"size":size, "title":ttl,"url":curl}
			L2.append(itm)
	
	return L2



class Tracker:
	def __init__(self):
		pass

	def Search(self, info):
		print('====== torlook =====')
		tmc = time.strftime('%d%y%m')
		t2=info['originaltitle']
		t1=info['title']
		url=httpSiteUrl+'/'+urllib.quote_plus(t1)
		print(url)
		hp=GET(url)
		if not PY2: hp=hp.decode('utf8')
		Lout=get_list(hp, t2)#, info)
		
		return Lout

	def Query(self, query):
		try:
			rez = self.Search({'originaltitle': '', 'title': query})
			return rez
		except Exception as e:
			print(e)
			return []

if __name__ == '__main__':
	#print(Tracker().Search({'originaltitle':'Терминатор','title':'Терминатор'}))
	print(Tracker().Query('Терминатор 2019'))
