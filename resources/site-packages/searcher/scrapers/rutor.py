#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys
PY2 = sys.version_info.major == 2
import os
import string
try:
	import xbmc, xbmcgui, xbmcplugin, xbmcaddon
except: pass
import time, random
from vdlib.kodi.compat import translatePath
if PY2:
	import urllib, urllib2
else:
	import urllib.parse as urllib
	import urllib.request as urllib2
#import azpt
import time
#-----------------------------------------
import socket
socket.setdefaulttimeout(30)

siteUrl = ''
try:
	__settings__ = xbmcaddon.Addon()
	siteUrl = __settings__.getSetting('rutor_url')
	opennic = __settings__.getSetting('opennic') == 'true'
except: opennic = False
if siteUrl == "": siteUrl = 'rutor.lib' #'mega-film.xyz'
httpSiteUrl = 'http://' + siteUrl

if opennic:
	prv_getaddrinfo = socket.getaddrinfo
	dns_cache = {
	('rutor.lib', 80, 0, 1): [(2, 1, 6, '', ('91.132.60.10', 80))],
	}

	def new_getaddrinfo(*args):
		if args in dns_cache:
			return dns_cache[args]
		res = prv_getaddrinfo(*args)
		dns_cache[args] = res
#		print(dns_cache)
#		open('dns_cache.txt', 'wb').write(str(dns_cache))
		return res

	socket.getaddrinfo = new_getaddrinfo


def unlock(url):
	url='http://127.0.0.1:8095/proxy/'+url
	return url


def ru(x):return unicode(x,'utf8', 'ignore')
def xt(x):
	x = x.replace('&#039;',"'")
	try:
		return translatePath(x)
	except:
		return x
def rt(x):
	L=[('&#39;','’'), ('&#145;','‘'), ('&#146;','’'), ('&#147;','“'), ('&#148;','”'), ('&#149;','•'), ('&#150;','–'), ('&#151;','—'), ('&#152;','?'), ('&#153;','™'), ('&#154;','s'), ('&#155;','›'), ('&#156;','?'), ('&#157;',''), ('&#158;','z'), ('&#159;','Y'), ('&#160;',''), ('&#161;','?'), ('&#162;','?'), ('&#163;','?'), ('&#164;','¤'), ('&#165;','?'), ('&#166;','¦'), ('&#167;','§'), ('&#168;','?'), ('&#169;','©'), ('&#170;','?'), ('&#171;','«'), ('&#172;','¬'), ('&#173;',''), ('&#174;','®'), ('&#175;','?'), ('&#176;','°'), ('&#177;','±'), ('&#178;','?'), ('&#179;','?'), ('&#180;','?'), ('&#181;','µ'), ('&#182;','¶'), ('&#183;','·'), ('&#184;','?'), ('&#185;','?'), ('&#186;','?'), ('&#187;','»'), ('&#188;','?'), ('&#189;','?'), ('&#190;','?'), ('&#191;','?'), ('&#192;','A'), ('&#193;','A'), ('&#194;','A'), ('&#195;','A'), ('&#196;','A'), ('&#197;','A'), ('&#198;','?'), ('&#199;','C'), ('&#200;','E'), ('&#201;','E'), ('&#202;','E'), ('&#203;','E'), ('&#204;','I'), ('&#205;','I'), ('&#206;','I'), ('&#207;','I'), ('&#208;','?'), ('&#209;','N'), ('&#210;','O'), ('&#211;','O'), ('&#212;','O'), ('&#213;','O'), ('&#214;','O'), ('&#215;','?'), ('&#216;','O'), ('&#217;','U'), ('&#218;','U'), ('&#219;','U'), ('&#220;','U'), ('&#221;','Y'), ('&#222;','?'), ('&#223;','?'), ('&#224;','a'), ('&#225;','a'), ('&#226;','a'), ('&#227;','a'), ('&#228;','a'), ('&#229;','a'), ('&#230;','?'), ('&#231;','c'), ('&#232;','e'), ('&#233;','e'), ('&#234;','e'), ('&#235;','e'), ('&#236;','i'), ('&#237;','i'), ('&#238;','i'), ('&#239;','i'), ('&#240;','?'), ('&#241;','n'), ('&#242;','o'), ('&#243;','o'), ('&#244;','o'), ('&#245;','o'), ('&#246;','o'), ('&#247;','?'), ('&#248;','o'), ('&#249;','u'), ('&#250;','u'), ('&#251;','u'), ('&#252;','u'), ('&#253;','y'), ('&#254;','?'), ('&#255;','y')]
	for i in L:
		x=x.replace(i[0], i[1])
	return x

def mfindal(http, ss, es):
	L=[]
	while http.find(es)>0:
		s=http.find(ss)
		e=http.find(es)
		i=http[s:e]
		L.append(i)
		http=http[e+2:]
	return L

def mfind(t,s,e):
	r=t[t.find(s)+len(s):]
	r2=r[:r.find(e)]
	return r2

def rulower(str):
	str=str.strip()
	str=xt(str).lower()
	str=str.replace('Й','й')
	str=str.replace('Ц','ц')
	str=str.replace('У','у')
	str=str.replace('К','к')
	str=str.replace('Е','е')
	str=str.replace('Н','н')
	str=str.replace('Г','г')
	str=str.replace('Ш','ш')
	str=str.replace('Щ','щ')
	str=str.replace('З','з')
	str=str.replace('Х','х')
	str=str.replace('Ъ','ъ')
	str=str.replace('Ф','ф')
	str=str.replace('Ы','ы')
	str=str.replace('В','в')
	str=str.replace('А','а')
	str=str.replace('П','п')
	str=str.replace('Р','р')
	str=str.replace('О','о')
	str=str.replace('Л','л')
	str=str.replace('Д','д')
	str=str.replace('Ж','ж')
	str=str.replace('Э','э')
	str=str.replace('Я','я')
	str=str.replace('Ч','ч')
	str=str.replace('С','с')
	str=str.replace('М','м')
	str=str.replace('И','и')
	str=str.replace('Т','т')
	str=str.replace('Ь','ь')
	str=str.replace('Б','б')
	str=str.replace('Ю','ю')
	return str


def GET(target, referer='', post=None):
	urllib2.install_opener(urllib2.build_opener())
#	if __settings__.getSetting("antizapret") == "true": target = unlock(target)
	#print target
	try:
		req = urllib2.Request(url = target, data = post)
		req.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
		resp = urllib2.urlopen(req)
		http = resp.read()
		resp.close()
		return http
	except Exception as e:
		print(e)

def get_list(url):
	hp=GET(url)
	if not PY2: hp=hp.decode('utf8')
	hp=hp.replace('class="gai"', 'class="tum"')
	L=mfindal(hp, 'class="tum"', '</span></td></tr>')
	L2=[]
	for i in L:
#		id = mfind(i,'/torrent/','/')
		ft = rt(mfind(mfind(i,'/torrent/','/a>'),'>','<').strip())
		size = mfind(i,'<td align="right">','</td><td align="center">').replace('&nbsp;', ' ').strip()
		if '"right">' in size: size=size[size.find('"right">')+8:]
		if 'MB' in size: size=size[:size.find('.')]+' MB'
		seeds = mfind(i,'alt="S" />','<').replace('&nbsp;', '').strip()
		
#		curl=httpSiteUrl+'/download/'+id
		curl = 'magnet:' + mfind(i,'magnet:','">')
#		if __settings__.getSetting("antizapret") == "true": curl=unlock(curl)
		#curl=azpt.convert(curl)
		ft = ft.replace('&#039;',"'")
		L2.append ({"sids":seeds,"size":size, "title":ft,"url":curl})
	return L2

class Tracker:
	def Search(self, info):
		t=info['originaltitle']
		if not PY2: t = urllib.quote_plus(t)
		url=httpSiteUrl+'/search/0/0/100/2/'+t.replace(' ','%20').replace("'",'')
		Lout=get_list(url)
		return Lout

	def Query(self, query):
		try:
			if PY2 and isinstance(query, unicode): query = query.encode('utf8')
			return self.Search({'originaltitle':query})
		except Exception as e:
			print(e)
			return []

if __name__ == '__main__':
#	print(Tracker().Query("The Queen's Gambit"))
	print(Tracker().Query("гамбит"))
